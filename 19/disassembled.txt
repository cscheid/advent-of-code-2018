This is a log of my reverse-engineering adventures with problem 19.

--------------------------------------------------------------------------------
# this used my old version of the disassembler that doesn't look like c++

IP: e
addi 4 16 4    0: e = e + 16
seti 1 8 1     1: b = 1
seti 1 3 5     2: f = 1
mulr 1 5 3     3: d = b * f
eqrr 3 2 3     4: d = 1 if d == c else 0
addr 3 4 4     5: e = d + e
addi 4 1 4     6: e = e + 1
addr 1 0 0     7: a = b + a
addi 5 1 5     8: f = f + 1
gtrr 5 2 3     9: d = 1 if f > c else 0
addr 4 3 4    10: e = e + d
seti 2 2 4    11: e = 2
addi 1 1 1    12: b = b + 1
gtrr 1 2 3    13: d = 1 if b > c else 0
addr 3 4 4    14: e = d + e
seti 1 4 4    15: e = 1
mulr 4 4 4    16: e = e * e
addi 2 2 2    17: c = c + 2
mulr 2 2 2    18: c = c * c
mulr 4 2 2    19: c = e * c
muli 2 11 2   20: c = c * 11
addi 3 6 3    21: d = d + 6
mulr 3 4 3    22: d = d * e
addi 3 8 3    23: d = d + 8
addr 2 3 2    24: c = c + d
addr 4 0 4    25: e = e + a
seti 0 1 4    26: e = 0
setr 4 4 3    27: d = e
mulr 3 4 3    28: d = d * e
addr 4 3 3    29: d = e + d
mulr 4 3 3    30: d = e * d
muli 3 14 3   31: d = d * 14
mulr 3 4 3    32: d = d * e
addr 2 3 2    33: c = c + d
seti 0 4 0    34: a = 0
seti 0 7 4    35: e = 0
--------------------------------------------------------------------------------

0:
  goto 17
1:
  # 19.1: [0, 0, 976, 140, 1, 0]
  # 19.2: [0, 0, 10551376, 10550400, 1, 0]
  b = 1
2:
  f = 1
3:
  d = b * f
  # d = d == c ? 1 : 0
  # jump_rel(d)
  # goto 8
  if d != c: goto 8
7:
  a = b + a
8:
  f = f + 1
  # d = f > c ? 1 : 0
  # jump_rel(d)
  # goto 3
  if f <= c: goto 3
  b = b + 1
  # d = b > c ? 1 : 0
  # jump_rel(d)
  # goto 2
  if b <= c: goto 2
16:
  halt
17:
  c = c  + 2
  c = c  * c
  c = 19 * c
  c = c  * 11
  d = d  + 6
  d = d  * 22
  d = d  + 8
  c = c  + d
  jump_rel(a)
26:
  goto 1
27:
  d = 27
  d = d * 28
  d = 29 + d
  d = 30 * d
  d = d * 14
  d = d * 32
  c = c + d
  a = 0
  goto 1

--------------------------------------------------------------------------------

0:
  goto 17
1:
  # 19.1: [0, 0, 976, 140, 1, 0]
  # 19.2: [0, 0, 10551376, 10550400, 1, 0]
  b = 1
2:
  f = 1
3:
  d = b * f
  if d == c:
     a += b
  f = f + 1
  if f <= c: goto 3
  b = b + 1
  if b <= c: goto 2
16:
  halt
17:
  c = c  + 2
  c = c  * c
  c = 19 * c
  c = c  * 11
  d = d  + 6
  d = d  * 22
  d = d  + 8
  c = c  + d
  jump_rel(a)
26:
  goto 1
27:
  d = 27
  d = d * 28
  d = 29 + d
  d = 30 * d
  d = d * 14
  d = d * 32
  c = c + d
  a = 0
  goto 1

--------------------------------------------------------------------------------

0:
  goto 17
1:
  # 19.1: [0, 0, 976,      140, 1, 0]
  # 19.2: [0, 0, 10551376, 10550400, 1, 0]
  b = 1
2:
  do:
    f = 1
    do:
      d = b * f
      if d == c:
         a += b
      f = f + 1
    while f <= c
    b = b + 1
  while b <= c
16:
  halt
17:
  c = c  + 2
  c = c  * c
  c = 19 * c
  c = c  * 11
  d = d  + 6
  d = d  * 22
  d = d  + 8
  c = c  + d
  jump_rel(a)
26:
  goto 1
27:
  d = 27
  d = d * 28
  d = 29 + d
  d = 30 * d
  d = d * 14
  d = d * 32
  c = c + d
  a = 0
  goto 1

--------------------------------------------------------------------------------
do:
  f = 1
  do:
    d = b * f
    if d == c:
       a += b
    f = f + 1
  while f <= c
  b = b + 1
while b <= c

--------------------------------------------------------------------------------

for (; b<=c; ++b) {
  for (f=1; f<=c; ++f) {
    if (b * f == c)
       a += b;
  }
}

--------------------------------------------------------------------------------

# notice the change in the loop variable
for (b=1; b<=c; ++b) {
  if (c % b == 0)
    a += c / b;
}
